import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";

const banner =
`/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = (process.argv[2] === "production");

const context = await esbuild.context({
	banner: {
		js: banner,
	},
	entryPoints: ["main.ts"],
	bundle: true,
	external: [
		"obsidian",
		"electron",
		"@codemirror/autocomplete",
		"@codemirror/collab",
		"@codemirror/commands",
		"@codemirror/language",
		"@codemirror/lint",
		"@codemirror/search",
		"@codemirror/state",
		"@codemirror/view",
		"@lezer/common",
		"@lezer/highlight",
		"@lezer/lr",
		...builtins],
	format: "cjs",
	target: "es2018",
	logLevel: "info",
	sourcemap: prod ? false : "inline",
	treeShaking: true,
	outfile: "main.js",
	minify: prod,
	loader: {
		'.wasm': 'binary'
	},
	plugins: [
		{
			name: 'wasm-plugin',
			setup(build) {
				// 处理 .wasm 文件导入
				build.onResolve({ filter: /\.wasm$/ }, (args) => {
					return { path: args.path, namespace: 'wasm' };
				});
				
				build.onLoad({ filter: /.*/, namespace: 'wasm' }, async (args) => {
					const fs = await import('fs');
					const path = await import('path');
					
					// 构造完整路径
					let wasmPath = args.path;
					if (!path.isAbsolute(wasmPath)) {
						wasmPath = path.resolve('node_modules/lindera-wasm-ko-dic', wasmPath);
					}
					
					const contents = fs.readFileSync(wasmPath);
					return {
						contents: contents,
						loader: 'binary',
					};
				});
			}
		}
	]
});

if (prod) {
	await context.rebuild();
	process.exit(0);
} else {
	await context.watch();
}
